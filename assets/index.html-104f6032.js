import{_ as t,M as n,p as a,q as r,R as i,t as e,N as d,a1 as l}from"./framework-5866ffd3.js";const o="/assets/image-20230309193849696-a2851f42.png",c={},u=l('<h1 id="elk笔记" tabindex="-1"><a class="header-anchor" href="#elk笔记" aria-hidden="true">#</a> ELK笔记</h1><div class="custom-container warning"><p class="custom-container-title">先学概念 → 再学rest api → 代码上手 → 思考原理</p></div><h2 id="一、简介和作用" tabindex="-1"><a class="header-anchor" href="#一、简介和作用" aria-hidden="true">#</a> 一、简介和作用</h2><h3 id="_1、简介" tabindex="-1"><a class="header-anchor" href="#_1、简介" aria-hidden="true">#</a> 1、简介</h3><div class="custom-container tip"><p class="custom-container-title">ELK是包含但不限于Elasticsearch（简称es）、Logstash、Kibana 三个开源软件的组成的一个整体，分别取其首字母组成ELK。</p></div><p>​ ELK是用于数据抽取（Logstash）、搜索分析（Elasticsearch）、数据展现（Kibana）的一整套解决方案，所以也称作ELK stack，其中Elasticsearch是ELK的核心。</p><ul><li>【Elasticsearch】：主要对底层的文档、索引、搜索、聚合、集群的操作，从搜索和聚合分析实例来展现它的魅力。</li><li>【Logstash】：会从内部如何采集数据到指定地方来展现它数据采集的功能。</li><li>【Kibana】：则从数据绘图来展现它数据可视化的能力。</li></ul><h3 id="_2、作用" tabindex="-1"><a class="header-anchor" href="#_2、作用" aria-hidden="true">#</a> 2、作用</h3><div class="custom-container tip"><p class="custom-container-title">Elasticsearch的功能：</p></div><p>（1）搜索和分析：</p><ul><li>全文检索：搜索商品名称包含java的图书select * from books where book_name like &quot;%java%&quot;。</li><li>结构化检索：搜索商品分类为spring的图书都有哪些，select * from books where category_id=&#39;spring&#39;</li><li>数据分析：分析每一个分类下有多少种图书，select category_id,count(*) from books group by category_id</li></ul><p>（2）近实时数据：Elasticsearch 可以对海量近实时数据进行处理；数据库上亿条数据查询，搜索一次耗时几个小时，而es只需秒级即可查询海量数据，所以叫近实时，秒级。</p><p>（3）分布式：ES自动可以将海量数据分散到多台服务器上去存储和检索,经行并行查询，提高搜索效率。相对的，Lucene是单机应用。</p><div class="custom-container tip"><p class="custom-container-title">示例：</p></div><ol><li>搜索：互联网搜索、电商网站站内搜索、OA系统查询</li><li>电商网站查询近一周哪些品类的商品销售前十；</li><li>新闻网站，最近3天阅读量最高的十个关键词，舆情分析。</li></ol><h2 id="二、核心概念" tabindex="-1"><a class="header-anchor" href="#二、核心概念" aria-hidden="true">#</a> 二、核心概念</h2><div class="custom-container danger"><p class="custom-container-title">NRT、Cluster、Node、Index、Document、Field、shard、replica</p></div><p><strong>（1）NRT（Near Realtime）：近实时</strong></p><ul><li>写入数据时，过1秒才会被搜索到，因为内部在分词、录入索引。</li><li>ES搜索时：搜索和分析数据需要秒级出结果。</li></ul><p><strong>（2）Cluster：集群</strong></p><ul><li>包含一个或多个启动着es实例的机器群。</li><li>通常一台机器起一个es实例。同一网络下，集群名一样的多个es实例自动组成集群，自动均衡分片等行为。默认集群名为“elasticsearch”。</li></ul><p><strong>（3）Node：节点</strong></p><ul><li>每个es实例称为一个节点。节点名自动分配，也可以手动配置。</li></ul><p><strong>（4）Index：索引</strong></p><ul><li><p>包含一堆有相似结构的文档数据。</p></li><li><p>索引创建规则：</p><ul><li><p>仅限小写字母</p></li><li><p>不能包含\\、/、 *、?、&quot;、&lt;、&gt;、|、#以及空格符等特殊符号</p></li><li><p>从7.0版本开始不再包含冒号</p></li><li><p>不能以-、_或+开头</p></li><li><p>不能超过255个字节（注意它是字节，因此多字节字符将计入255个限制）</p></li></ul></li></ul><p><strong>（5）Document：文档</strong></p><ul><li>es中的最小数据单元。一个document就像数据库中的一条记录。<strong>通常以json格式显示</strong>。多个document存储于一个索引（Index）中。</li></ul><p><strong>（6）Field:字段</strong></p><ul><li>就像数据库中的列（Columns），定义每个document应该有的字段。</li></ul><p><strong>（7）Type：类型</strong></p><ul><li>每个索引里都可以有一个或多个type，type是index中的一个逻辑数据分类，一个type下的document，都有相同的field。</li><li><strong>注意</strong>：6.0之前的版本有type（类型）概念，type相当于关系数据库的表，ES官方将在ES9.0版本中彻底删除type。本笔记的type都为_doc。</li></ul><p><strong>（8）shard：分片</strong></p><ul><li>index数据过大时，将index里面的数据，分为多个shard，分布式的存储在各个服务器上面。可以支持海量数据和高并发，提升性能和吞吐量，充分利用多台机器的cpu。</li></ul><p><strong>（9）replica：副本</strong></p><ul><li>在分布式环境下，任何一台机器都会随时宕机，如果宕机，index的一个分片没有，导致此index不能搜索。所以，为了保证数据的安全，我们会将每个index的分片经行备份，存储在另外的机器上。保证少数机器宕机es集群仍可以搜索。</li><li>类似于主从复制的从机</li><li>能正常提供查询和插入的分片我们叫做主分片（primary shard），其余的我们就管他们叫做备份的分片（replica shard）。</li></ul><p>es6默认新建索引时，5分片，2副本，也就是一主一备，共10个分片。所以，es集群最小规模为两台。</p><p>elasticsearch核心概念 vs. 数据库核心概念</p><table><thead><tr><th><strong>关系型数据库（比如Mysql）</strong></th><th><strong>非关系型数据库（Elasticsearch）</strong></th></tr></thead><tbody><tr><td>数据库Database</td><td>索引Index</td></tr><tr><td>表Table</td><td>类型Type（_doc）</td></tr><tr><td>数据行Row</td><td>文档Document</td></tr><tr><td>数据列Column</td><td>字段Field</td></tr><tr><td>约束 Schema</td><td>映射Mapping</td></tr></tbody></table><h2 id="三、用法和字段解析" tabindex="-1"><a class="header-anchor" href="#三、用法和字段解析" aria-hidden="true">#</a> 三、用法和字段解析</h2><div class="custom-container tip"><p class="custom-container-title">elasticsearch的默认端口为9200，Kibana为5601</p></div><h3 id="_1、用法" tabindex="-1"><a class="header-anchor" href="#_1、用法" aria-hidden="true">#</a> 1、用法</h3>',41),p=i("strong",null,"json数据格式",-1),h={href:"http://t.csdn.cn/hGMT4",target:"_blank",rel:"noopener noreferrer"},v=l(`<div class="custom-container tip"><p class="custom-container-title">数据使用JSON格式，对数据的操作使用restful api接口</p></div><div class="language-http line-numbers-mode" data-ext="http"><pre class="language-http"><code>
#1、添加数据
PUT /user/_doc/1
{
  &quot;name&quot;:&quot;jack&quot;,
  &quot;age&quot;:18
}

#2、查找数据
GET /user/_doc/1

#3、修改数据
POST /user/_doc/1/_update
{
  &quot;doc&quot;:{
    &quot;name&quot;:&quot;rose&quot;
  }
}
#覆盖数据，要加上所有的字段
PUT /user/_doc/1
{
  &quot;name&quot;:&quot;rose&quot;,
  &quot;age&quot;:20
}

#4、删除数据
DELETE /user/_doc/1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解析：</p><ol><li><code>_doc</code>表示为数据格式类型为json格式</li><li>修改分为全部修改（覆盖），部分修改，部分修改需要添加<code>_update</code></li></ol><h3 id="_2、字段解析" tabindex="-1"><a class="header-anchor" href="#_2、字段解析" aria-hidden="true">#</a> 2、字段解析</h3><p><img src="`+o+'" alt="image-20230309193849696"></p><p><strong>（1）_index：</strong></p><ul><li>含义：此文档属于哪个索引</li><li>原则：类似数据放在一个索引中。数据库中表的定义规则。如图书信息放在book索引中，员工信息放在employee索引中。各个索引存储和搜索时互不影响。</li><li>定义规则：英文小写。尽量不要使用特殊字符。order user</li></ul><p><strong>（2）type</strong></p><ul><li>含义：类别。book java node，_doc为json格式</li><li>注意：以后的es9将彻底删除此字段，所以当前版本在不断弱化type。不需要关注。见到_type都为doc。</li></ul><p><strong>（3）_id</strong></p><ul><li>含义：文档的唯一标识。就像表的id主键。结合索引可以标识和定义一个文档。</li><li>生成：手动（put /index/_doc/id）、自动</li></ul><p><strong>（4）_source</strong></p><ul><li>含义：插入数据时的所有字段和值。在get获取数据时，在source字段中原样返回。</li><li><code>GET /book/_doc/1</code></li><li>定制返回字段： <ul><li>就像sql不要select *,而要<code>select name,price from book …</code>一样。</li><li><code>GET /book/_doc/1?__source_includes=name,price</code></li></ul></li></ul><p><strong>（5）version</strong></p><ul><li><strong>含义：当前数据的版本，es对于文档的增删改都是基于版本号</strong></li><li>作用：通过版本号验证(version)，可以解决es内的并发冲突问题，该方法处理属于乐观锁机制</li></ul><h2 id="四、java客户端进行操作" tabindex="-1"><a class="header-anchor" href="#四、java客户端进行操作" aria-hidden="true">#</a> 四、Java客户端进行操作</h2>',17);function m(g,b){const s=n("ExternalLinkIcon");return a(),r("div",null,[u,i("p",null,[e("es是面向文档的，es的document用"),p,e("来表达，通过**"),i("a",h,[e("restful api接口"),d(s)]),e("**对数据进行CRUD，因为是面向文档的，只要可以可以发送restful请求和可以解析json数据格式的语言都支持。")]),v])}const x=t(c,[["render",m],["__file","index.html.vue"]]);export{x as default};
