import{_ as p,M as l,p as c,q as o,R as s,t as n,N as e,a1 as i}from"./framework-5866ffd3.js";const d="/assets/1657530052574-7ce836ab.png",r="/assets/1657531156233-a7274079.png",u="/assets/1657531361055-acd562a3.png",v="/assets/image-20230306084643955-5a0516df.png",k="/assets/image-20230306085106451-500df9a0.png",t="/assets/image-20230306085357772-7c26e444.png",m="/assets/image-20230306085438997-5d52023f.png",g="/assets/image-20230306085902617-7ca5be42.png",b="/assets/1657507807889-8ffd6220.png",h="/assets/image-20220713092526231-f68f20ca.png",x="/assets/1657507661343-1264f023.png",w="/assets/1657509039232-85fa6931.png",_="/assets/1657509682419-d88211fc.png",y="/assets/1657510276751-45fc20bd.png",f="/assets/image-20220712152343632-b6290bdc.png",z="/assets/image-20220712153302770-534eec67.png",j="/assets/image-20220713131449954-a4979cf4.png",q="/assets/image-20220713132032861-981fcea7.png",L="/assets/image-20220713132138381-ec54fad9.png",P="/assets/image-20220714164105074-a93f281a.png",S="/assets/image-20220714164156365-6b100278.png",A="/assets/image-20220713153150102-ca095497.png",N="/assets/image-20220713153422776-1dce8c84.png",T="/assets/image-20220713160342661-a6e6f2fa.png",E="/assets/image-20220713161110581-785e07ad.png",C="/assets/image-20220713161557596-d7964e5e.png",M="/assets/image-20220713171258079-eee6d3ab.png",D="/assets/image-20220713171229793-48f7dfb3.png",I="/assets/image-20220713175913937-3a1a0718.png",B="/assets/image-20220713172639758-500766cd.png",G="/assets/image-20220713172843173-7a1457c5.png",H="/assets/image-20220713180106546-01b1e3a2.png",R="/assets/image-20220706172922752-f43db494.png",$={},U=i('<h1 id="nginx教程" tabindex="-1"><a class="header-anchor" href="#nginx教程" aria-hidden="true">#</a> nginx教程</h1><h2 id="第一章-基础及安装" tabindex="-1"><a class="header-anchor" href="#第一章-基础及安装" aria-hidden="true">#</a> 第一章 基础及安装</h2><h3 id="一、nginx-功能介绍" tabindex="-1"><a class="header-anchor" href="#一、nginx-功能介绍" aria-hidden="true">#</a> 一、nginx 功能介绍</h3><div class="custom-container warning"><p class="custom-container-title">什么是nginx？nginx有什么作用？</p></div><p>Nginx (&quot;engine x&quot;) 是一款开源的，支持高性能、高并发的 <strong>Web 服务和代理服务软件</strong>。它是由俄罗斯人 Igor Sysoev 开发的，最初被应用在俄罗斯的大型网站 www.rambler.ru 上。后来作者将源代码以类 BSD 许可的形式开源出来供全球使用。因为它的<code>稳定性</code>、<code>丰富的模块库</code>、<code>灵活的配置</code>和<code>低系统资源</code>的消耗而闻名。</p><p>目前，市场上还有很多的同类竞品，如大名鼎鼎的apache，Lighttpd。目前，Nginx的市场份额和域数量双双稳居世界第一，并以 4.12 亿的总数遥遥领先其它竞争对手。</p><p><strong>小知识：</strong></p><blockquote><p>BSD许可证的条款</p></blockquote><p>使用BSD协议，需要遵守以下规则</p><ol><li>如果再发布的产品中包含源代码，则在源代码中必须带有原来代码中的BSD协议；</li><li>如果再发布的只是二进制类库/软件，则需要在类库/软件的文档和版权声明中包含原来代码中的BSD协议；</li><li>不可以用开源代码的“作者/机构的名字”或“原来产品的名字”做市场推广。</li></ol><p>现今存在的开源协议很多，而经过Open Source Initiative（开放源代码倡议）通过批准的开源协议目前有60多种（http://www.opensource.org/licenses/alphabetical ）。我们在常见的开源协议如BSD, GPL, LGPL,MIT等都是OSI批准的协议。</p><p>我们可以在这网网站，</p><p><img src="'+d+'" alt="1657530052574"></p><p>我们摘取几个和大家分享一下：</p><ul><li>Apache License 2.0：它是对商业应用友好的许可。使用者也可以在需要的时候修改代码来满足需要并作为开源或商业产品发布/销售。</li><li>BSD开源协议（Berkerley Software Distribution）：商业软件可以使用，也可以修改使用BSD协议的代码。</li><li>MIT ( MIT license )：商业软件可以使用，也可以修改MIT协议的代码，甚至可以出售MIT协议的代码。</li><li>MPL ( Mozilla Public License 1.1 )：商业软件可以使用，也可以修改MPL协议的代码，但修改后的代码版权归软件的发起者。</li><li>CDDL (Common Development and Distribution License )：商业软件可以使用，也可以修改CDDL协议的代码。</li><li>EPL (Eclipse Public License 1.0 )：商业软件可以使用，也可以修改EPL协议的代码，但要承担代码产生的侵权责任。</li><li>GPL ( GNU General Public License )：商业软件不能使用GPL协议的代码。</li><li>LGPL ( GNU Library or “Lesser” General Public License )：商业软件可以使用，但不能修改LGPL协议的代码。</li></ul><h3 id="二、nginx可以提供的服务" tabindex="-1"><a class="header-anchor" href="#二、nginx可以提供的服务" aria-hidden="true">#</a> 二、nginx可以提供的服务</h3><ol><li>web 服务</li><li>负载均衡 （反向代理）</li><li>web cache（web 缓存）</li></ol><h3 id="三、nginx-的优点" tabindex="-1"><a class="header-anchor" href="#三、nginx-的优点" aria-hidden="true">#</a> 三、nginx 的优点</h3><ol><li>比其他服务器响应更快。</li><li>高扩展，nginx的设计极具扩展性，他是由多个功能不同且耦合性极低的模块组成。</li><li>单机支持并发极高，理论上支持10万的并发连接，nginx支持的并发连接和内存相关，超过10万也是可以的。</li><li>低内存消耗，10000个非活跃的http keep-alive链接在nginx中仅仅消耗2.5M的内存。</li><li>支持热部署，如不用停止服务就能重新加载配置文件。</li><li>极具自由的BSD许可协议。我们不仅可以直接阅读nginx的源代码、还能用来修改升级。</li></ol><h3 id="四、nginx应用场合" tabindex="-1"><a class="header-anchor" href="#四、nginx应用场合" aria-hidden="true">#</a> 四、nginx应用场合</h3><ol><li>静态服务器。用来存放我们的静态资源，如图片、静态页面、js、css等。</li><li>反向代理，负载均衡。日pv2000W以下，都可以直接用nginx做代理。</li><li>缓存服务。</li></ol><h3 id="五、nginx实战" tabindex="-1"><a class="header-anchor" href="#五、nginx实战" aria-hidden="true">#</a> 五、nginx实战</h3><p>我们的nginx测试都是在linux环境中进行的，所有首先你需要一个linux系统，可以是云服务器，也可以是自己的vmware。</p><h4 id="_1、下载nginx安装包" tabindex="-1"><a class="header-anchor" href="#_1、下载nginx安装包" aria-hidden="true">#</a> 1、下载nginx安装包</h4><p>进入nginx官网（http://nginx.org/en/）：</p><p><img src="'+r+'" alt="1657531156233"></p><p>Nginx官网提供了三个类型的版本</p><ul><li>Mainline version：Mainline 是 Nginx 目前主力在做的版本，可以说是开发版</li><li>Stable version：最新稳定版，生产环境上建议使用的版本</li><li>Legacy versions：遗留的老版本的稳定版</li></ul><p>我们下载这个最新的稳定版本：</p><p><img src="'+u+'" alt="1657531361055"></p><h4 id="_2、安装依赖包" tabindex="-1"><a class="header-anchor" href="#_2、安装依赖包" aria-hidden="true">#</a> 2、安装依赖包</h4><p>nginx安装依赖GCC、openssl-devel、pcre-devel和zlib-devel软件库，他们的作用如下：</p>',32),W=s("li",null,"zlib库用于对HTTP包的内容做gzip格式的压缩，并指定对于某些类型（content-type）的HTTP响应使用gzip来进行压缩以减少网络传输量，则在编译时就必须把zlib编译进Nginx。",-1),O={href:"https://baike.baidu.com/item/perl/851577",target:"_blank",rel:"noopener noreferrer"},V={href:"https://baike.baidu.com/item/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F",target:"_blank",rel:"noopener noreferrer"},K=s("li",null,"如果服务器不只是要支持HTTP，还需要在更安全的SSL协议上传输HTTP，那么需要拥有OpenSSL。另外，如果我们想使用MD5、SHA1等散列函数，那么也需要安装它。可以这样安装：",-1),X=i(`<p>我们使用一下的命令进行安装：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yum <span class="token function">install</span> gcc zlib-devel  pcre pcre-devel openssl openssl-devel <span class="token parameter variable">-y</span> 
yum <span class="token parameter variable">-y</span> <span class="token function">install</span> gcc openssl openssl-devel pcre-devel zlib zlib-devel
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>小知识：</p><p>devel 包主要是供开发用，至少包括以下2个东西头文件和链接，有的还含有开发文档或演示代码。</p><p>以 glib 和 glib-devel 为例:</p><ul><li><p>如果你安装基于 glib 开发的程序，只需要安装 glib 包就行了。</p></li><li><p>但是如果你要编译使用了 glib 的源代码，则需要安装 glib-devel。</p></li></ul><h4 id="_3、编译安装" tabindex="-1"><a class="header-anchor" href="#_3、编译安装" aria-hidden="true">#</a> 3、编译安装</h4><p>下载nginx</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">wget</span> http://nginx.org/download/nginx-1.22.0.tar.gz
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+v+`" alt="image-20230306084643955"></p><p>解压：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> nginx-1.22.1.tar.gz
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>nginx最简单的编译安装方式，就是进入nginx解压后的目录，使用以下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./configure
<span class="token function">make</span>
<span class="token function">make</span> <span class="token function">install</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>./configure</code>命令做了很多幕后工作，包括检测操作系统内核和已经安装的软件，参数的解析，中间目录的生成，以及根据参数生成c源码文件和makefile文件等。</p></li><li><p>make命令根据，configure命令生成的makefile文件编译nginx工程，并生成目标文件、最终的二进制文件。</p></li><li><p>make install命令负责将nginx安装到指定的安装目录，包括相关目录的建立和二进制文件、位置文件的复制。</p></li></ul><p>以上命令会将nginx按照默认配置（默认模块、默认安装路径）进行安装，如果需要自定义一些配置，则需要使用如下的方式。</p><p>具体的命令如下：</p><ul><li>使用<code>./configure --help</code>查看各个模块的使用情况。</li><li>使用<code>--without-http_ssi_module</code>的方式关闭不需要的模块。</li><li>可以使用<code>--with-http_perl_modules</code>方式安装需要的模块。</li></ul><blockquote><p>编译命令</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> nginx-1.22.1.tar.gz
<span class="token builtin class-name">cd</span> nginx-1.22.1

<span class="token function">mkdir</span> /data/nginx <span class="token parameter variable">-p</span>

<span class="token comment"># -M ： 不创建主目录  -s ： 不允许登录 /sbin/nologin是一个有一个特殊的shell，不需要登陆</span>
<span class="token function">useradd</span> nginx <span class="token parameter variable">-M</span> <span class="token parameter variable">-s</span> /sbin/nologin 

./configure <span class="token parameter variable">--prefix</span><span class="token operator">=</span>/data/nginx <span class="token parameter variable">--user</span><span class="token operator">=</span>nginx <span class="token parameter variable">--group</span><span class="token operator">=</span>nginx  --with-http_ssl_module  --with-http_stub_status_module

<span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code>--with-http_ssl_module  安装该模块，该模块是nginx支持ssl协议，提供https服务。
--with-http_stub_status_module  <span class="token comment">#是一个监视模块，可以查看目前的连接数等一些信息，因为是非核心模块，所以我们使用nginx -V默认是没有安装的</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+k+`" alt="image-20230306085106451"></p><blockquote><p>测试nginx配置文件是否正常</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>/data/nginx/sbin/nginx <span class="token parameter variable">-t</span> 
nginx: the configuration <span class="token function">file</span> /data/nginx-1.10.1/conf/nginx.conf syntax is ok
nginx: configuration <span class="token function">file</span> /data/nginx-1.10.1/conf/nginx.conf <span class="token builtin class-name">test</span> is successful
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>启动nginx服务器</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>/data/nginx/sbin/nginx  <span class="token parameter variable">-t</span>      <span class="token comment">## 检查配置文件</span>
/data/nginx/sbin/nginx          <span class="token comment">## 确定nginx服务</span>

<span class="token builtin class-name">cd</span> sbin						  <span class="token comment">## 进入/data/nginx/sbin文件夹</span>
./nginx						  <span class="token comment">## 启动服务</span>
<span class="token function">netstat</span> <span class="token parameter variable">-lntup</span> <span class="token operator">|</span><span class="token function">grep</span> nginx      <span class="token comment">## 检查进程是否正常</span>
<span class="token function">curl</span> http://localhost           <span class="token comment">## 确认结果</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>Windows端测试：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#关闭防火墙</span>
systemctl stop firewalld.service

<span class="token comment">#windows浏览器输入 Linux的ip地址+80端口：如下</span>
<span class="token number">192.168</span>.200.135:80
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+t+`" alt="image-20230306085357772"></p></li><li><p>Linux端测试：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token number">127.0</span>.0.1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+m+`" alt="image-20230306085438997"></p></li></ul><blockquote><p>nginx其他命令</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>nginx <span class="token parameter variable">-s</span> signal
signal：
stop — 立马关闭
quit — 优雅关闭，处理完没处理好的请求后关闭
reload — 重新加载配置文件
reopen — reopening the log files
用来打开日志文件，这样nginx会把新日志信息写入这个新的文件中
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>安装net-tools来查看端口使用情况：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>yum -y install net-tools
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,31),F={href:"https://so.csdn.net/so/search?q=arp&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"},J=i(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">netstat</span> <span class="token parameter variable">-nplt</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+g+'" alt="image-20230306085902617"></p><h2 id="第二章-实战-部署前后分离项目" tabindex="-1"><a class="header-anchor" href="#第二章-实战-部署前后分离项目" aria-hidden="true">#</a> 第二章 实战-部署前后分离项目</h2><p>本章节我们会演示日常的工作中，我们是怎么利用nginx部署项目的。我们以部署一套前后分离的项目为本次讲述的内容。</p><h3 id="一、搭建后端项目" tabindex="-1"><a class="header-anchor" href="#一、搭建后端项目" aria-hidden="true">#</a> 一、搭建后端项目</h3><p>创建一个最简单的springboot项目：</p><p><img src="'+b+'" alt="1657507807889"></p><p>只需要依赖一个web模块即可：</p><p><img src="'+h+`" alt="image-20220713092526231"></p><p>提供一个api接口，可以获取服务端的主机地址和服务端口：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NginxController</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WebServerInitializedEvent</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> port<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onApplicationEvent</span><span class="token punctuation">(</span><span class="token class-name">WebServerInitializedEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>port <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getWebServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;host&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getHost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">InetAddress</span> address<span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            address <span class="token operator">=</span> <span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getLocalHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span>  address<span class="token punctuation">.</span><span class="token function">getHostAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;:&quot;</span> <span class="token operator">+</span> port<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnknownHostException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token string">&quot;error：Network card information is not available！&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试接口：</p><p><img src="`+t+`" alt="image-20220713094617222"></p><h3 id="二、搭建前端项目" tabindex="-1"><a class="header-anchor" href="#二、搭建前端项目" aria-hidden="true">#</a> 二、搭建前端项目</h3><p>搭建前端工程，使用vue官方提供的脚手架搭建一个基础工程：</p><div class="language-http line-numbers-mode" data-ext="http"><pre class="language-http"><code><span class="token header"><span class="token header-name keyword">https</span><span class="token punctuation">:</span><span class="token header-value">//cli.vuejs.org/guide/creating-a-project.html</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用<code>vue ui</code>搭建脚手架，选择安装vue-router：</p><p><img src="`+x+'" alt="1657507661343"></p><p>启动项目，打开项目：</p><p><img src="'+w+`" alt="1657509039232"></p><p>安装axios：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> axios
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用axios访问后端的api接口，修改app.vue如下：</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  &lt;./img alt=&quot;Vue logo&quot; src=&quot;./assets/logo.png&quot;&gt;
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>服务器的ip和端口是：{{ host }}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">&#39;axios&#39;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;App&#39;</span><span class="token punctuation">,</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> ip_addr <span class="token operator">=</span> document<span class="token punctuation">.</span>location<span class="token punctuation">.</span>hostname
    axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;http://&#39;</span><span class="token operator">+</span>ip_addr<span class="token operator">+</span><span class="token string">&#39;:8080/host&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>host <span class="token operator">=</span> res<span class="token punctuation">.</span>data
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>浏览器访问，发生了跨域问题：</p><p><img src="`+_+`" alt="1657509682419"></p><p>添加配置项，新建<code>vue.config.js</code>位置文件，配置代理如下:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">80</span><span class="token punctuation">,</span>
    <span class="token literal-property property">proxy</span><span class="token operator">:</span> <span class="token string">&#39;http://127.0.0.1:8080&#39;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同时修改axiso的请求地址：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> ip_addr <span class="token operator">=</span> document<span class="token punctuation">.</span>location<span class="token punctuation">.</span>hostname
    axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;http://&#39;</span><span class="token operator">+</span>ip_addr<span class="token operator">+</span><span class="token string">&#39;/host&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>host <span class="token operator">=</span> res<span class="token punctuation">.</span>data
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再次访问前端工程，发现跨域问题解决：</p><p><img src="`+y+'" alt="1657510276751"></p><h3 id="三、nginx做静态服务器" tabindex="-1"><a class="header-anchor" href="#三、nginx做静态服务器" aria-hidden="true">#</a> 三、nginx做静态服务器</h3><p>我们都知道，nginx的安装目录中有这样一个文件夹：</p><p><img src="'+f+`" alt="image-20220712152343632"></p><p>我们再结合nginx的基础配置文件中的以下内容：</p><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>
    <span class="token directive"><span class="token keyword">listen</span>       <span class="token number">80</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">server_name</span>  localhost</span><span class="token punctuation">;</span>

    <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">{</span>
        <span class="token directive"><span class="token keyword">root</span>   html</span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">index</span>  index.html index.htm</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们不妨猜想一下当url为<code>/</code>时（当然这是错的），会去html目录寻找index.html文件作为首页。</p><p>我们不妨修改一下index.html文件看看，修改是否可以生效。</p><p><img src="`+z+'" alt="image-20220712153302770"></p><p>确实可以生效，于是我们可以得出，结论只需要将我们的q前端文件放在html目录即可（事实上放在哪里都可以）。</p><p>我们尝试将构建的结果放入html文件夹：</p><p>前端工程产物如下：</p><p><img src="'+j+'" alt="image-20220713131449954"></p><p>上传至nginx：</p><p><img src="'+q+'" alt="image-20220713132032861"></p><p>他真的可以访问了，但是，此时却出现了问题，ngixn无法判断哪些是静态资源，哪些是需要访问api接口的：</p><p><img src="'+L+`" alt="image-20220713132138381"></p><p>问题如下，此问题按下不表，后续处理：</p><h3 id="四、虚拟主机配置详解" tabindex="-1"><a class="header-anchor" href="#四、虚拟主机配置详解" aria-hidden="true">#</a> 四、虚拟主机配置详解</h3><p>http服务上支持【若干虚拟主机】。每个虚拟主机对应一个server配置项，配置项里面包含该虚拟主机相关的配置。</p><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">server</span></span><span class="token punctuation">{</span>
    <span class="token directive"><span class="token keyword">listen</span> <span class="token number">80</span> default</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">server_name</span> www.ydlclass.com</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">index</span> index.html index.htm index.php</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">root</span> /data/www</span><span class="token punctuation">;</span>

    <span class="token directive"><span class="token keyword">location</span> ~ .*\\.(gif|jpg|jpeg|png|bmp|swf)$</span><span class="token punctuation">{</span>
        <span class="token directive"><span class="token keyword">expires</span>      <span class="token number">30d</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token directive"><span class="token keyword">location</span> ~ .*\\.(js|css)?$</span><span class="token punctuation">{</span>
        <span class="token directive"><span class="token keyword">expires</span>      <span class="token number">1h</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>listen 80;</code> 监听端口，默认80，小于1024的要以root启动。可以为listen :80、listen 127.0.0.1:80等形式。</li><li><code>server_name www.ydlclass.com</code> 用于设置虚拟主机服务名称，如：127.0.0.1 、 localhost 、域名[www.baidu.com | www.jd.com]，也可以进行正则匹配。</li><li><code>root /data/www</code> 定义服务器的默认网站根目录位置。可以是linux的绝对路径（/xxx/xx），也可以是nginx安装目录的相对路径（html）。</li><li><code>index index.jsp index.html index.htm</code> ：定义路径下默认访问的文件名，一般跟着root放。</li></ul><h4 id="_1、location-常见的配置项" tabindex="-1"><a class="header-anchor" href="#_1、location-常见的配置项" aria-hidden="true">#</a> 1、location 常见的配置项：</h4><p>location通常用来匹配uri，其基本语法如下：</p><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">location</span> [=|~|~*|^~] /uri/</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>（1）<code>等值匹配：</code>=表示匹配uri时必须做到完全匹配，如</p><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">location</span> = /index</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>（2）~表示匹配URI时是字母大小写敏感的，可以使用正则表达式。</p><p>（3）~*表示匹配URI时是忽略字母大小敏感的，可以使用正则表达式。</p><p>（4）<code>前缀匹配：</code>^~表示匹配uri时只需满足前缀匹配即可</p><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token comment"># 所有 /./img/开头的uri会全部匹配</span>
<span class="token directive"><span class="token keyword">location</span> ^~ /./img/</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>（5）uri参数中是可以使用正则表达式的，如匹配以 .gif .jpg和.jpeg结尾的uri，如下:</p><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">location</span> ~* \\.(gif|jpg|jpeg)$</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>（6）<code>全部匹配：</code>以下方式可以匹配所有的uri</p><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>（7）<code>@</code> 指定一个命名的location，一般用于内部重定义请求：</p><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">location</span> @name</span> <span class="token punctuation">{</span>…<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>结果总结： 匹配的优先顺序，<code>=</code>&gt;<code>^~</code>（匹配固定字符串，忽略正则）&gt;<code>~*</code>&gt;<code>/</code> ，工作中尽量将‘=’放在前面。</p><p>http://192.168.111.201/1.png</p><h4 id="_2、文件路径的定义" tabindex="-1"><a class="header-anchor" href="#_2、文件路径的定义" aria-hidden="true">#</a> 2、文件路径的定义</h4><p>（1）以root方式设置资源路径</p><p>语法 root path ，默认 root html，可以在http、server、location模块中配置。</p><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">location</span> ^~ /backend</span> <span class="token punctuation">{</span>
	root /data/www/backend
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果url为<code> /backend/index/test.html</code>则会返回/data/www/backend/backend/index/test.html这个文件。</p><p>（2）以alias方式设置资源路径</p><p>alias也是用来设置文件资源的，它和root不同点在于如何解读紧跟location后面的uri参数，可以在location中配置：</p><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">location</span> ^~ /backend</span> <span class="token punctuation">{</span>
	alias /data/www/backend
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果url为 <code>/backend/index/test.html</code>则会返回/data/www/backend/index/test.html文件。</p><p>alias会将location后的url部分丢弃掉，而root不会。</p><p>（3）访问首页</p><p>可以在http、server、location中配置。</p><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code>index index.html index.htm index.php
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>nginx会依次访问index中定义的文件，知道访问成功为止。</p><p>（4）根据http返回码重定向页面</p><p>可以在http、server、location中配置。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>error_page 404 /404.html
error_page 502 503 504 /50x.html
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>（5）try_files</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>try_files path1 path2 ... uri
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该配置项可以配置在server、location模块。</p><p>try_files后边会跟若干路径，nginx会尝试按照顺序访问每一个path，如果可以有效的读取，就直接访问当下path资源，否则继续向下访问，如果都读取不到就重定向到uri参数上</p><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">try_files</span> /a/b.html <span class="token variable">$uri</span> <span class="token variable">$uri</span>/index.html <span class="token variable">$uri</span>.html @other</span><span class="token punctuation">;</span>
<span class="token directive"><span class="token keyword">location</span> @other</span> <span class="token punctuation">{</span>
    proxy_pass http://backend
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3、解决前端的路由问题" tabindex="-1"><a class="header-anchor" href="#_3、解决前端的路由问题" aria-hidden="true">#</a> 3、解决前端的路由问题</h4><p>我们在前端直接点击路由的按钮可以访问，因为这种情况并未再次向nginx发送请求，仅仅是前端的路由切换：</p><p><img src="`+P+'" alt="image-20220714164105074"></p><p>但是，如果直接访问<code>/about</code>就GG了，这个url直接访问nginx时，nginx会认为你要查找about这个资源，当然是404了：</p><p><img src="'+S+`" alt="image-20220714164156365"></p><p>所以我们要通过一些配置来解决这个问题，vue工程都是单页面的，所以无论哪个路由都应该使用唯一的index.html，所以我们可以做如下的配置，该配置的意思就是将其他的所有请求，都强制使用/index.html：</p><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">{</span>
    <span class="token directive"><span class="token keyword">root</span> /data/www/ui</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">try_files</span> /index.html</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是这个有问题的，比如下边的请求，也会强制使用index.html，我明明需要js，你却给我一个HTML：</p><div class="language-http line-numbers-mode" data-ext="http"><pre class="language-http"><code><span class="token header"><span class="token header-name keyword">http</span><span class="token punctuation">:</span><span class="token header-value">//192.168.111.201/js/app.aa11d15b.js</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>所以配置要改成下边的内容，$uri是一个变量，他就是具体的url，对一<code>/js/app.aa11d15b.js</code>这个请求，首先会访问<code>/data/www/ui/js/app.aa11d15b.js</code>这个资源，当然存在，就直接返回了，而其他的路由资源会使用index.html：</p><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">{</span>
    <span class="token directive"><span class="token keyword">root</span> /data/www/ui</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">try_files</span> <span class="token variable">$uri</span> <span class="token variable">$uri</span>/ <span class="token variable">$uri</span>/index.html <span class="token variable">$uri</span>.html /index.html</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4、对图片开启gzip压缩" tabindex="-1"><a class="header-anchor" href="#_4、对图片开启gzip压缩" aria-hidden="true">#</a> 4、对图片开启gzip压缩</h4><p>在http模块中添加如下内容：</p><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">gzip</span> <span class="token boolean">on</span></span><span class="token punctuation">;</span>
<span class="token directive"><span class="token keyword">gzip_min_length</span> <span class="token number">1k</span></span><span class="token punctuation">;</span>
<span class="token directive"><span class="token keyword">gzip_buffers</span>    <span class="token number">4</span> <span class="token number">16k</span></span><span class="token punctuation">;</span>
<span class="token directive"><span class="token keyword">gzip_http_version</span> 1.1</span><span class="token punctuation">;</span>
<span class="token directive"><span class="token keyword">gzip_comp_level</span> <span class="token number">5</span></span><span class="token punctuation">;</span>
<span class="token directive"><span class="token keyword">gzip_types</span> image/png</span><span class="token punctuation">;</span>
<span class="token directive"><span class="token keyword">gzip_vary</span> <span class="token boolean">on</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解释如下：</p><ul><li><p>gzip on;使用&quot;gzip on;&quot;参数来启用压缩，默认是关闭的。</p></li><li><p>gzip_min_length 1k;gzip压缩的最小文件，小于设置值的文件将不会压缩#指定Nginx服务需要向服务器申请的缓存空间的个数*大小，默认32 4k|16 8k;</p></li><li><p>gzip_buffers 4 16k;设置压缩缓冲区大小，此处设置为4个16K内存作为压缩结果流缓存</p></li><li><p>gzip_http_version 1.1;启用压缩功能时，协议的最小版本，默认HTTP/1.1</p></li><li><p>gzip_comp_level 5;压缩比例由低到高从1到9，默认为1。但需要注意的是压缩比设置的越高就会越消耗CPU的资源，因此在生产环境中我们会设置该参数的值在3~5之间，最好不要超过5，因为随着压缩比的增大的确会降低传输的带宽成本但发送数据前会占用更多的CPU时间分片。</p></li><li><p>gzip_types image/png;指明仅对哪些类型的资源执行压缩操作；默认为gzip_types text/html，不用显示指定，否则出错。</p></li><li><p>gzip_vary on;该指令用于设置在使用Gzip功能时是否发送带有“Vary: Accept-Encoding”头域的响应头部。该头域的主要功能是告诉接收方发送的数据经过了压缩处理。开启后的效果是在响应头部添加了Accept-Encoding: gzip，这对于本身不支持Gzip压缩的客户端浏览器是有用的。</p></li></ul><p>这一次没有设置图片压缩：</p><p><img src="`+A+'" alt="image-20220713153150102"></p><p>设置图片压缩后，响应多了如下的首部信息：</p><p><img src="'+N+`" alt="image-20220713153422776"></p><h3 id="五、反向代理解决跨域" tabindex="-1"><a class="header-anchor" href="#五、反向代理解决跨域" aria-hidden="true">#</a> 五、反向代理解决跨域</h3><h4 id="_1、配置nginx反向代理" tabindex="-1"><a class="header-anchor" href="#_1、配置nginx反向代理" aria-hidden="true">#</a> 1、配置nginx反向代理</h4><p>我们可以通过proxy_pass参数设置反向代理的服务器，语法如下：</p><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">{</span>
    <span class="token directive"><span class="token keyword">proxy_pass</span> http://ydl.com</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+T+'" alt="image-20220713160342661"></p><p>我们的实现逻辑很简单，就是将以<code>/api</code>为前缀的uri全部反向代理到真正的后端服务即可。</p><p>安装java环境：</p><p><img src="'+E+'" alt="image-20220713161110581"></p><p>后台启动成功：</p><p><img src="'+C+`" alt="image-20220713161557596"></p><p>我们为了区分前端页面和api接口，将所有访问后端api的url统一加上前缀 /api</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">var</span> ip_addr <span class="token operator">=</span> document<span class="token punctuation">.</span>location<span class="token punctuation">.</span>hostname
  axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;http://&#39;</span><span class="token operator">+</span>ip_addr<span class="token operator">+</span><span class="token string">&#39;/api/host&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
   <span class="token keyword">this</span><span class="token punctuation">.</span>host <span class="token operator">=</span> res<span class="token punctuation">.</span>data
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们想的是将前端发送的以api打头的url全部代理到，后端8080端口：</p><p>前端访问的接口：http://192.168.111.200:80/api/host</p><p>后端的接口：http://192.168.111.200:8080/host</p><p>在实现代理的过程中，我们需要将/api这个前缀删除掉，有以下两种方法，一种是重写url，如下：</p><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">location</span> ^~ /api/</span> <span class="token punctuation">{</span>
    <span class="token directive"><span class="token keyword">rewrite</span> ^/api(.*)$ <span class="token variable">$1</span> break</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">proxy_pass</span> http://127.0.0.1:8080</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>更简单的做法是，在代理地址的后边加<code>/</code>，这样做也会去掉前缀，但不如以上方式灵活：</p><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">location</span> ^~ /api/</span> <span class="token punctuation">{</span>
    <span class="token directive"><span class="token keyword">proxy_pass</span> http://127.0.0.1:8080/</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>小知识：location中的rewirte：</p><ol><li><p>rewrite break：url重写后，直接使用当前资源，不再执行location里余下的语句，完成本次请求，地址栏url不变</p></li><li><p>rewrite last：url重写后，马上发起一个新的请求，再次进入server块，重试location匹配，超过10次匹配不到报500错误，地址栏url不变</p></li><li><p>rewrite redirect：返回302临时重定向，地址栏显示重定向后的url。</p></li></ol><h3 id="六、为后端工程做负载均衡" tabindex="-1"><a class="header-anchor" href="#六、为后端工程做负载均衡" aria-hidden="true">#</a> 六、为后端工程做负载均衡</h3><p>有时候，我们的后端工程压力太大，可能需要将后端工程部署在多台服务器上，此时就需要使用负载均衡了，在学习负载均衡的时候我们不妨先了解一下upstream模块。</p><h4 id="_1、upstream模块解读" tabindex="-1"><a class="header-anchor" href="#_1、upstream模块解读" aria-hidden="true">#</a> 1、upstream模块解读</h4><p>nginx 的负载均衡功能依赖于 ngx_http_upstream_module模块。upstream 模块应该放于http{}标签内。</p><p>模块写法如下：</p><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">upstream</span> backend</span> <span class="token punctuation">{</span>
    <span class="token directive"><span class="token keyword">ip_hash</span></span><span class="token punctuation">;</span> 
    <span class="token directive"><span class="token keyword">server</span> backend1.example.com</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">server</span> backend2.example.com:8080</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">server</span> 127.0.0.1:8080</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">server</span> backup2.example.com:8080</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在location处使用如下写法：</p><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">{</span>
    <span class="token directive"><span class="token keyword">proxy_pass</span> http://backend</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上写法的意思就是，将来同一个url访问我们的服务时，服务可以由backend中的服务器按照某种特定规则轮流提供。</p><blockquote><p>ngixn负载均衡的五种算法</p></blockquote><p>（1）round robin 轮询 （默认） 按时间顺序依次将请求分配到各个后台服务器中，挂掉的服务器自动从列表中剔除</p><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">upstream</span> bakend</span> <span class="token punctuation">{</span>  
   <span class="token directive"><span class="token keyword">server</span> 192.168.0.1 down</span><span class="token punctuation">;</span>    
   <span class="token directive"><span class="token keyword">server</span> 192.168.0.2</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）weight 轮询权重 weight的值越大分配到的访问概率越高，主要用于后端每台服务器性能不均衡的情况下，或在主从的情况下设置不同的权值，达到合理有效的地利用主机资源。</p><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">upstream</span> bakend</span> <span class="token punctuation">{</span>  
    <span class="token directive"><span class="token keyword">server</span> 192.168.0.1 weight=20</span><span class="token punctuation">;</span>  
    <span class="token directive"><span class="token keyword">server</span> 192.168.0.2 weight=10</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（3）ip_hash：每个请求按访问IP的哈希结果分配，使来自同一个IP的访客固定访问一台后端服务器，并且可以有效解决动态网页存在的session共享问题。</p><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">upstream</span> bakend</span> <span class="token punctuation">{</span>  
    <span class="token directive"><span class="token keyword">ip_hash</span></span><span class="token punctuation">;</span>  
    <span class="token directive"><span class="token keyword">server</span> 192.168.0.1:88</span><span class="token punctuation">;</span>  
    <span class="token directive"><span class="token keyword">server</span> 192.168.0.2:80</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（4）url_hash：按访问的URL的哈希结果来分配请求，使每个URL定向到同一台后端服务器，可以进一步提高后端服务器缓存的效率。Nginx本身不支持url_hash，需要安装Nginx的hash软件包。</p><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">upstream</span> backend</span> <span class="token punctuation">{</span>  
    <span class="token directive"><span class="token keyword">server</span> 192.168.0.1:88</span><span class="token punctuation">;</span>     //使用hash语句时，不能在使用weight等其他参数
    <span class="token directive"><span class="token keyword">server</span> 192.168.0.2:80</span><span class="token punctuation">;</span>  
    <span class="token directive"><span class="token keyword">hash</span> <span class="token variable">$request_uri</span></span><span class="token punctuation">;</span>  
    <span class="token directive"><span class="token keyword">hash_method</span> crc32</span><span class="token punctuation">;</span>    //使用hash算法
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（5）fair算法：可以根据页面大小和加载时间长短智能地进行负载均衡，根据后端服务器的响应时间来分配请求，响应时间短的优先分配。Nginx本身不支持fair，要安装upstream_fair模块才能使用。</p><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">upstream</span> backend</span> <span class="token punctuation">{</span>  
    <span class="token directive"><span class="token keyword">server</span> 192.168.0.1:88</span><span class="token punctuation">;</span>  
    <span class="token directive"><span class="token keyword">server</span> 192.168.0.2:80</span><span class="token punctuation">;</span>  
    <span class="token directive"><span class="token keyword">fair</span></span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2、项目配置" tabindex="-1"><a class="header-anchor" href="#_2、项目配置" aria-hidden="true">#</a> 2、项目配置</h4><p>首先我们需要将我们的后端项目在服务器中启动两份或多份，可以是同一台服务器，也可以是多台服务器，只要可以互联互通即可。</p><p>同一台服务器可以使用如下命令，重新指定一个端口即可：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>java -jar ydl-nginx.jar --server.port=8081
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们需要定义一个upstream，将都有的后端服务配置在其中：</p><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">upstream</span> ydlclass</span> <span class="token punctuation">{</span>
    <span class="token directive"><span class="token keyword">server</span> 127.0.0.1:8080 weight <span class="token number">10</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">server</span> 127.0.0.1:8081 weight <span class="token number">20</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改location的proxy_pass：</p><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">location</span> ^~ /api/</span> <span class="token punctuation">{</span>
    <span class="token directive"><span class="token keyword">proxy_pass</span> http://ydlclass/</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在浏览器中不停的刷新，发现端口在不停的变化，说明我们的多次请求确实落在了不同服务上。</p><p><img src="`+M+'" alt="image-20220713171258079"></p><p><img src="'+D+'" alt="image-20220713171229793"></p><h3 id="七、其他的跨域问题" tabindex="-1"><a class="header-anchor" href="#七、其他的跨域问题" aria-hidden="true">#</a> 七、其他的跨域问题</h3><p>如果现在本机的前端项目（也就是其他服务器的前端项目）也想要访问虚拟机中ngixn代理的api接口。这是一个典型的不同的项目之间进行访问的问题，这必然存在跨域问题，如下图：</p><p><img src="'+I+`" alt="image-20220713175913937"></p><p>我们将本地的vue工程进行如下修改：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;http://192.168.111.200/api/host&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>host <span class="token operator">=</span> res<span class="token punctuation">.</span>data
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时，确实发生了跨域问题：</p><p><img src="`+B+`" alt="image-20220713172639758"></p><p>根据我们学习过的知识要解决跨域问题。其实，只需要在客户端发送【预检请求】时指定对应的响应头即可，nginx可以很方便的给响应增加一些首部信息，方法如下，在：</p><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">location</span> ^~ /api/</span> <span class="token punctuation">{</span>
    <span class="token directive"><span class="token keyword">add_header</span> <span class="token string">&#39;Access-Control-Allow-Origin&#39;</span> <span class="token string">&#39;*&#39;</span></span><span class="token punctuation">;</span>
	<span class="token directive"><span class="token keyword">add_header</span> <span class="token string">&#39;Access-Control-Allow_Credentials&#39;</span> <span class="token string">&#39;true&#39;</span></span><span class="token punctuation">;</span>
	<span class="token directive"><span class="token keyword">add_header</span> <span class="token string">&#39;Access-Control-Allow-Headers&#39;</span> <span class="token string">&#39;Authorization,Accept,Origin,DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range&#39;</span></span><span class="token punctuation">;</span>
	<span class="token directive"><span class="token keyword">add_header</span> <span class="token string">&#39;Access-Control-Allow-Methods&#39;</span> <span class="token string">&#39;GET,POST,OPTIONS,PUT,DELETE,PATCH&#39;</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">proxy_pass</span> http://ydlclass/</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>访问本地地址，本次访问跨域的问题被解决了：</p><p><img src="`+G+'" alt="image-20220713172843173"></p><p>我们也能看到对应的响应首部信息，多了如下内容：</p><p><img src="'+H+`" alt="image-20220713180106546"></p><h3 id="八、nginx监控" tabindex="-1"><a class="header-anchor" href="#八、nginx监控" aria-hidden="true">#</a> 八、nginx监控</h3><p>开启nginx的监控服务</p><h4 id="_1、开启状态页" tabindex="-1"><a class="header-anchor" href="#_1、开启状态页" aria-hidden="true">#</a> 1、开启状态页</h4><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token comment">#设定查看Nginx状态的地址   </span>
<span class="token directive"><span class="token keyword">location</span> = /status</span> <span class="token punctuation">{</span>  
  <span class="token directive"><span class="token keyword">stub_status</span> <span class="token boolean">on</span></span><span class="token punctuation">;</span>   	<span class="token comment">#表示开启stubStatus的工作状态统计功能。</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2、访问url" tabindex="-1"><a class="header-anchor" href="#_2、访问url" aria-hidden="true">#</a> 2、访问URL</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> http://127.0.0.1/status

Active connections:  <span class="token number">1</span>
server accepts handled requests
 <span class="token number">16</span> <span class="token number">16</span> <span class="token number">18</span>
Reading: <span class="token number">0</span> Writing: <span class="token number">1</span> Waiting: <span class="token number">0</span>

<span class="token comment"># active connections – 活跃的连接数量</span>
<span class="token comment"># server accepts handled reque</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以访问/status查看当前nginx的状态：</p><p><img src="`+R+`" alt="image-20220706172922752"></p><table><thead><tr><th>状态码</th><th>表示的意义</th></tr></thead><tbody><tr><td>Active connections</td><td>当前所有处于打开状态的连接数</td></tr><tr><td>accepts</td><td>总共处理了多少个连接</td></tr><tr><td>handled</td><td>成功创建多少握手</td></tr><tr><td>requests</td><td>总共处理了多少个请求</td></tr><tr><td>Reading</td><td>表示正处于接收请求状态的连接数</td></tr><tr><td>Writing</td><td>表示请求已经接收完成，且正处于处理请求或发送响应的过程中的连接数</td></tr><tr><td>Waiting</td><td>开启keep-alive的情况下，这个值等于active - (reading + writing)，意思就是Nginx已处理完正在等候下一次请求指令的驻留连接</td></tr></tbody></table><h3 id="五、其它nginx配置" tabindex="-1"><a class="header-anchor" href="#五、其它nginx配置" aria-hidden="true">#</a> 五、其它nginx配置</h3><h4 id="_1、访问控制-allow-deny" tabindex="-1"><a class="header-anchor" href="#_1、访问控制-allow-deny" aria-hidden="true">#</a> 1、访问控制 allow/deny</h4><p>Nginx 的访问控制模块默认就会安装，而且写法也非常简单，可以分别有多个allow,deny，允许或禁止某个ip或ip段访问，依次满足任何一个规则就停止往下匹配。如：</p><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">location</span> /status</span> <span class="token punctuation">{</span>
  <span class="token directive"><span class="token keyword">stub_status</span> <span class="token boolean">on</span></span><span class="token punctuation">;</span>
  <span class="token directive"><span class="token keyword">access_log</span> <span class="token boolean">off</span></span><span class="token punctuation">;</span>
  <span class="token directive"><span class="token keyword">allow</span> 192.168.10.100</span><span class="token punctuation">;</span>
  <span class="token directive"><span class="token keyword">allow</span> 172.29.73.0/24</span><span class="token punctuation">;</span>
  <span class="token directive"><span class="token keyword">deny</span> all</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2、列出目录-autoindex" tabindex="-1"><a class="header-anchor" href="#_2、列出目录-autoindex" aria-hidden="true">#</a> 2、列出目录 autoindex</h4><p>Nginx默认是不允许列出整个目录的。如需此功能，打开nginx.conf文件，在location，server 或 http段中加入如下参数：这个功能我们可以做一个资源下载站。</p><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">location</span> ^~ /file</span> <span class="token punctuation">{</span>
    <span class="token directive"><span class="token keyword">root</span>   /data/www</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">autoindex</span> <span class="token boolean">on</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">autoindex_exact_size</span> <span class="token boolean">off</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">autoindex_localtime</span> <span class="token boolean">on</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">charset</span> utf-8,gbk</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>autoindex on;</code>运行列出目录内容。另外两个参数最好也加上去。</li><li><code>autoindex_exact_size off;</code> 默认为on，显示出文件的确切大小，单位是bytes。改为off后，显示出文件的大概大小，单位是kB或者MB或者GB。</li><li><code>autoindex_localtime on;</code> 默认为off，显示的文件时间为GMT时间。改为on后，显示的文件时间为文件的服务器时间。</li></ul><h2 id="第三章-总结" tabindex="-1"><a class="header-anchor" href="#第三章-总结" aria-hidden="true">#</a> 第三章 总结</h2><ol><li>Nginx是一款Web 服务和代理服务软件，可以做静态服务器、解决跨域问题、还具有负载均衡的作用</li><li>跨域问题： <ul><li>同一主机，不同端口：前端添加前缀如在每个向后端请求资源的请求中的url添加前缀，nginx通过location进行拦截，使用表达式进行匹配（如前缀表达式），匹配后进行url重写，再进行反向代理</li><li>不同主机：可以在请求中添加发送【预检请求】的请求头的即可，nginx可以给响应添加一些首部信息，如果收到的请求允许访问，则可以访问</li></ul></li><li>负载均衡： <ol><li>轮询、轮询+权重、ip地址hash</li></ol></li></ol>`,196);function Q(Y,Z){const a=l("ExternalLinkIcon");return c(),o("div",null,[U,s("ul",null,[W,s("li",null,[n("Pcre全称（Perl Compatible Regular Expressions），Perl库，包括 "),s("a",O,[n("perl"),e(a)]),n(" 兼容的"),s("a",V,[n("正则表达式"),e(a)]),n("库，如果我们在nginx中使用了正则表达式，那么在编译Nginx时就必须把PCRE库编译进Nginx。")]),K]),X,s("p",null,[n("net-tools工具箱包括"),s("a",F,[n("arp"),e(a)]),n(", hostname, ifconfig, netstat, rarp, route, plipconfig, slattach, mii-tool and iptunnel and ipmaddr等命令。")]),J])}const sn=p($,[["render",Q],["__file","index.html.vue"]]);export{sn as default};
